
R version 2.4.0 Under development (unstable) (2006-08-22 r38955)
Copyright (C) 2006 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> set.seed(290875)
> gctorture(on = FALSE)
> library(party)
Loading required package: survival
Loading required package: splines
Loading required package: grid
Loading required package: modeltools
Loading required package: coin
Loading required package: mvtnorm
Loading required package: zoo

Attaching package: 'zoo'


	The following object(s) are masked from package:base :

	 rapply 

Loading required package: sandwich
Loading required package: strucchange
> if (!require(ipred))
+     stop("cannot load package ipred")
Loading required package: ipred
Loading required package: rpart
Loading required package: MASS

Attaching package: 'MASS'


	The following object(s) are masked from package:strucchange :

	 SP500 

Loading required package: mlbench
Loading required package: nnet
Loading required package: class
> gctorture(on = GCtorture)
> 
> ### get rid of the NAMESPACE
> nsparty <- attach(NULL, name="ns-party")
> .Internal(lib.fixup(asNamespace("party"), nsparty))
> 
> gtctrl <- new("GlobalTestControl")
> tlev <- levels(gtctrl@testtype)
> 
> data(GlaucomaM, package = "ipred")
> inp <- initVariableFrame(GlaucomaM[,-63,drop = FALSE], trafo = NULL) #, fun = rank)
> resp <- initVariableFrame(GlaucomaM[,"Class",drop = FALSE], trafo = NULL)
> ls <- new("LearningSample", inputs = inp, responses = resp,
+           weights = rep(1, inp@nobs), nobs = nrow(GlaucomaM), 
+           ninputs = inp@ninputs)
> tm <- ctree_memory(ls, TRUE)
> ctrl <- ctree_control()
> node <- .Call("R_Node", ls, ls@weights, tm, ctrl)
> stopifnot(isequal(node[[5]][[3]], 0.059))
> 
> ### and now with ranked inputs -> Wilcoxon-Mann-Whitney tests
> inp <- initVariableFrame(GlaucomaM[,-63,drop = FALSE], trafo = function(data)
+ ptrafo(data, numeric_trafo = rank))
> resp <- initVariableFrame(GlaucomaM[,"Class",drop = FALSE], trafo = NULL)
> ls <- new("LearningSample", inputs = inp, responses = resp,
+           weights = rep(1, inp@nobs), nobs = nrow(GlaucomaM), 
+           ninputs = inp@ninputs)
> tm <- ctree_memory(ls, TRUE)
> ctrl <- ctree_control()
> node <- .Call("R_Node", ls, ls@weights, tm, ctrl)
> stopifnot(isequal(node[[5]][[3]], 0.059))
> 
