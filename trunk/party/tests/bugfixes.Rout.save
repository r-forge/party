
R version 2.6.0 RC (2007-09-25 r42980)
Copyright (C) 2007 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> set.seed(290875)
> gctorture(on = FALSE)
> library(party)
Loading required package: survival
Loading required package: splines
Loading required package: grid
Loading required package: modeltools
Loading required package: stats4
Loading required package: coin
Loading required package: mvtnorm
Loading required package: zoo

Attaching package: 'zoo'


	The following object(s) are masked from package:base :

	 rapply 

Loading required package: sandwich
Loading required package: strucchange
Loading required package: vcd
Loading required package: MASS
Loading required package: colorspace
> gctorture(on = GCtorture)
> 
> ### get rid of the NAMESPACE
> nsparty <- attach(NULL, name="ns-party")
> .Internal(lib.fixup(asNamespace("party"), nsparty))
> 
> ### check if doxygen documentation is there
> stopifnot(nchar(system.file("documentation/html/index.html", package = "party")) > 29)
> 
> ### check nominal level printing
> set.seed(290875)
> x <- gl(5, 50)
> df <- data.frame(y = c(rnorm(50, 0), rnorm(50, 1), rnorm(50, 2), rnorm(50, 3), rnorm(50, 4)), 
+                  x = x, z = rnorm(250))
> ctree(y ~ x, data = df)

	 Conditional inference tree with 5 terminal nodes

Response:  y 
Input:  x 
Number of observations:  250 

1) x == {3, 4, 5}; criterion = 1, statistic = 159.215
  2) x == {4, 5}; criterion = 1, statistic = 54.696
    3) x == {5}; criterion = 1, statistic = 16.711
      4)*  weights = 50 
    3) x == {4}
      5)*  weights = 50 
  2) x == {3}
    6)*  weights = 50 
1) x == {1, 2}
  7) x == {2}; criterion = 1, statistic = 21.738
    8)*  weights = 50 
  7) x == {1}
    9)*  weights = 50 
> 
> ### check asymptotic vs. MonteCarlo, especially categorical splits after
> ### MonteCarlo resampling
> a <- ctree(y ~ x + z, data = df, control = ctree_control(stump = TRUE))
> b <- ctree(y ~ x + z, data = df,
+            control =  ctree_control(testtype = "Monte", stump = TRUE))
> stopifnot(isequal(a@tree$psplit, b@tree$psplit))  
> stopifnot(isequal(a@tree$criterion$statistic, b@tree$criterion$statistic))
> 
> ### we did not check the hyper parameters
> try(cforest_control(minsplit = -1))
Error in validObject(object@splitctrl) : 
  invalid class "SplitControl" object: FALSE
In addition: Warning message:
In validityMethod(object) :
  no negative values allowed in objects of class ‘SplitControl’
> try(cforest_control(ntree = -1))
Error in validObject(RET) : invalid class "ForestControl" object: FALSE
In addition: Warning message:
In validityMethod(object) : ‘ntree’ must be equal or greater 1
> try(cforest_control(maxdepth = -1))
Error in validObject(object@tgctrl) : 
  invalid class "TreeGrowControl" object: FALSE
In addition: Warning message:
In validityMethod(object) : ‘maxdepth’ must be positive
> try(cforest_control(nresample = 10))
Error in validObject(object@gtctrl) : 
  invalid class "GlobalTestControl" object: FALSE
In addition: Warning message:
In validityMethod(object) : ‘nresample’ must be larger than 100
> 
> ### NA handling for factors and in random forest
> ### more than one (ordinal) response variable
> xo <- ordered(x)
> x[sample(1:length(x), 10)] <- NA
> cforest(y + xo ~ x + z, data = df, 
+         control = cforest_control(ntree = 50))

	 Random Forest using Conditional Inference Trees

Number of trees:  50 

Responses: y, xo 
Inputs:  x, z 
Number of observations:  250 

There were 50 or more warnings (use warnings() to see the first 50)
> 
> ### make sure minsplit is OK in the presence of missing values
> ### spotted by Han Lee <Han.Lee@GeodeCapital.com>
> load("t1.RData")
> tr <- try(ctree(p ~., data = t1))
> stopifnot(!inherits(tr, "try-error"))
> 
> ### make sure number of surrogate splits exceeds number of inputs by 1
> ### spotted by Henric Nilsson <henric.nilsson@phadia.com>
> airq <- subset(airquality, !is.na(Ozone))
> tr <- try(ctree(Ozone ~ Wind, data = airq,
+           controls = ctree_control(maxsurrogate = 3)))
Error in model@fit(data, ...) : 
  cannot set up 3 surrogate splits with only 1 input variable(s)
> stopifnot(inherits(tr, "try-error"))
> 
> ### ctree() used only the first of a multivariate response
> ### spotted by Henric Nilsson <henric.nilsson@phadia.com>
> airq <- subset(airquality, complete.cases(Ozone, Solar.R))
> airOzoSol1 <- ctree(Ozone + Solar.R ~ Wind + Temp + Month + Day,
+                     data = airq)
> airOzoSol2 <- ctree(Solar.R + Ozone ~ Wind + Temp + Month + Day,
+                     data = airq)
> stopifnot(isequal(airOzoSol1@where, airOzoSol2@where))
> 
> ### one variable with all values missing
> dat <- data.frame(y = rnorm(100), x1 = runif(100), x2 = rep(NA, 100))
> ctree(y ~ x1 + x2, data = dat)

	 Conditional inference tree with 1 terminal nodes

Response:  y 
Inputs:  x1, x2 
Number of observations:  100 

1)*  weights = 100 
> 
> ### one factor with only one level
> dat$x2 <- factor(rep(0, 100))
> try(ctree(y ~ x1 + x2, data = dat))

	 Conditional inference tree with 1 terminal nodes

Response:  y 
Inputs:  x1, x2 
Number of observations:  100 

1)*  weights = 100 
Warning message:
In factor_trafo(x) : factors at only one level may lead to problems
> 
> ### weights for sampling without replacement for cforest
> ### spotted by Carolin Strobl <carolin.strol@stat.uni-muenchen.de>
> airq <- subset(airquality, !is.na(Ozone))
> cctrl <- cforest_control(replace = FALSE, fraction = 0.5)
> n <- nrow(airq)
> w <- double(n)
> 
> 
> if (FALSE) {
+ ### forest objects have weights remove in 0.9-13
+ 
+ ### case weights
+ x <- runif(w)
+ w[x > 0.5] <- 1
+ w[x > 0.9] <- 2
+ 
+ rf <- cforest(Ozone ~ .,data = airq, weights = w, control = cctrl)
+ rfw <- sapply(rf@ensemble, function(x) x[[2]])
+ stopifnot(all(colSums(rfw) == ceiling(sum(w) / 2)))
+ stopifnot(max(abs(rfw[w == 0,])) == 0)
+ 
+ ### real weights
+ w <- runif(n)
+ w[1:10] <- 0
+ rf <- cforest(Ozone ~ .,data = airq, weights = w, control = cctrl)
+ rfw <- sapply(rf@ensemble, function(x) x[[2]])
+ stopifnot(all(colSums(rfw) == ceiling(sum(w > 0) / 2)))
+ stopifnot(max(abs(rfw[w == 0,])) == 0)
+ }
> 
> ### cforest with multivariate response
> df <- data.frame(y1 = rnorm(100), y2 = rnorm(100), x1 = runif(100), x2 = runif(100))
> df$y1[df$x1 < 0.5] <- df$y1[df$x1 < 0.5] + 1
> cf <- cforest(y1 + y2 ~ x1 + x2, data = df)
There were 50 or more warnings (use warnings() to see the first 50)
> pr <- predict(cf)
> stopifnot(nrow(pr) == nrow(df) || ncol(pr) != 2)
> 
> ### varimp with ordered response
> ### spotted by Max Kuhn <Max.Kuhn@pfizer.com>
> test <- cforest(ME ~ ., data = mammoexp, control = cforest_control(ntree = 50))
> stopifnot(sum(abs(varimp(test)[,1])) > 0)
> 
> ### missing values in factors lead to segfaults on 64 bit systems
> ### spotted by Carolin Strobl <carolin.strobl@lme.de>
> y <- rnorm(100)
> x <- gl(2, 50)
> z <- gl(2, 50)[sample(1:100)]
> y <- y + (x == "1") * 3
> xNA <- x
> xNA[1:2] <- NA
> ctree(y ~ xNA )

	 Conditional inference tree with 2 terminal nodes

Response:  y 
Input:  xNA 
Number of observations:  100 

1) xNA == {1}; criterion = 1, statistic = 72.397
  2)*  weights = 48 
1) xNA == {2}
  3)*  weights = 52 
> 
