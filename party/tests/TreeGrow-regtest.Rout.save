
R : Copyright 2005, The R Foundation for Statistical Computing
Version 2.1.0 Under development (unstable) (2005-03-17), ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for a HTML browser interface to help.
Type 'q()' to quit R.

> 
> set.seed(290875)
> gctorture(on = FALSE)
> library(party)
Loading required package: survival
Loading required package: splines
Loading required package: grid
Loading required package: modeltools
> if (!require(ipred))
+     stop("cannot load package ipred")
Loading required package: ipred
Loading required package: rpart
Loading required package: MASS
Loading required package: mlbench
Loading required package: nnet
Loading required package: class
> gctorture(on = GCtorture)
> 
> ### load additional R code which is only partially in arty/R'
> source(file.path(.find.package("party"), "Rcode", "TestCode.R"))
> 
> gtctrl <- new("GlobalTestControl")
> tlev <- levels(gtctrl@testtype)
> 
> data(GlaucomaM, package = "ipred")
> inp <- party:::initVariableFrame(GlaucomaM[,-63,drop = FALSE]) #, fun = rank)
> resp <- party:::initVariableFrame(GlaucomaM[,"Class",drop = FALSE])
> ls <- new("LearningSample", inputs = inp, responses = resp,
+           weights = rep(1, inp@nobs), nobs = nrow(GlaucomaM), 
+           ninputs = inp@ninputs)
> tm <- TreeFitMemory(ls, TRUE)
> ctrl <- new("TreeControl")
> ctrl@gtctrl@testtype <- factor("Bonferroni", levels = tlev)
> ctrl@varctrl@teststattype <- factor("quadform", levels = c("maxabs", "quadform"))
> where <- rep(0, ls@nobs)
> storage.mode(where) <- "integer"
> tree <- .Call("R_TreeGrow", ls, ls@weights, tm, ctrl, where)
> stopifnot(isequal(tree[[5]][[3]], 0.059))
> 
> # print(tree)
> 
> ctrl@tgctrl@stump = TRUE
> stump <- .Call("R_TreeGrow", ls, ls@weights, tm, ctrl, where)
> # print(stump)
> 
> data(treepipit)
> 
> tr <- ctree(counts ~ ., data = treepipit, teststattype = "quadform")
> tr
 1) coverstorey  <=  40; max(criterion) =  0.998 , max(test statistic) =  13.678 
   2)*  weights =  24 , prediction =  1.042 
 1) coverstorey  >  40
   3)*  weights =  62 , prediction =  0.032 
> plot(tr)
> 
> 
> data(GlaucomaM, package = "ipred")
> 
> tr <- ctree(Class ~ ., data = GlaucomaM, teststattype = "quadform")
> tr
 1) vari  <=  0.059; max(criterion) =  1 , max(test statistic) =  71.475 
   2) vasg  <=  0.046; max(criterion) =  1 , max(test statistic) =  29.265 
     3) vart  <=  0.005; max(criterion) =  0.999 , max(test statistic) =  18.185 
       4)*  weights =  51 , prediction =  1 0 
     3) vart  >  0.005
       5)*  weights =  22 , prediction =  0.864 0.136 
   2) vasg  >  0.046
     6)*  weights =  14 , prediction =  0.357 0.643 
 1) vari  >  0.059
   7)*  weights =  109 , prediction =  0.211 0.789 
> plot(tr)
> 
> data(GBSG2, package = "ipred")  
> 
> GBSG2tree <- ctree(Surv(time, cens) ~ ., data = GBSG2, teststattype = "quadform")
> GBSG2tree
 1) pnodes  <=  3; max(criterion) =  1 , max(test statistic) =  56.171 
   2) horTh  ==  { no }; max(criterion) =  0.966 , max(test statistic) =  8.163 
     3)*  weights =  248 , prediction =  -0.118 
   2) horTh  ==  { yes }
     4)*  weights =  128 , prediction =  -0.308 
 1) pnodes  >  3
   5) progrec  <=  20; max(criterion) =  0.999 , max(test statistic) =  14.935 
     6)*  weights =  144 , prediction =  0.44 
   5) progrec  >  20
     7)*  weights =  166 , prediction =  0.03 
> plot(GBSG2tree)
> plot(GBSG2tree, terminal = survNode(GBSG2tree))
> survfit(Surv(time, cens) ~ as.factor(GBSG2tree@where), data = GBSG2)
Call: survfit(formula = Surv(time, cens) ~ as.factor(GBSG2tree@where), 
    data = GBSG2)

                               n events median 0.95LCL 0.95UCL
as.factor(GBSG2tree@where)=3 248     88   2093    1814     Inf
as.factor(GBSG2tree@where)=4 128     31    Inf    2372     Inf
as.factor(GBSG2tree@where)=6 144    103    624     525     797
as.factor(GBSG2tree@where)=7 166     77   1701    1174    2018
> names(GBSG2)
 [1] "horTh"    "age"      "menostat" "tsize"    "tgrade"   "pnodes"  
 [7] "progrec"  "estrec"   "time"     "cens"    
> 
> tr <- ctree(Surv(time, cens) ~ ., data = GBSG2, teststattype = "maxabs", testtype = "Raw")
> tr
 1) pnodes  <=  3; max(criterion) =  1 , max(test statistic) =  7.495 
   2) horTh  ==  { no }; max(criterion) =  0.996 , max(test statistic) =  2.857 
     3) menostat  ==  { Post }; max(criterion) =  0.978 , max(test statistic) =  2.282 
       4)*  weights =  112 , prediction =  -0.019 
     3) menostat  ==  { Pre }
       5) age  <=  37; max(criterion) =  1 , max(test statistic) =  3.856 
         6)*  weights =  21 , prediction =  0.293 
       5) age  >  37
         7)*  weights =  115 , prediction =  -0.29 
   2) horTh  ==  { yes }
     8) progrec  <=  74; max(criterion) =  0.975 , max(test statistic) =  2.241 
       9)*  weights =  73 , prediction =  -0.136 
     8) progrec  >  74
       10)*  weights =  55 , prediction =  -0.537 
 1) pnodes  >  3
   11) progrec  <=  20; max(criterion) =  1 , max(test statistic) =  3.865 
     12) pnodes  <=  9; max(criterion) =  0.991 , max(test statistic) =  2.615 
       13)*  weights =  87 , prediction =  0.317 
     12) pnodes  >  9
       14)*  weights =  57 , prediction =  0.627 
   11) progrec  >  20
     15) horTh  ==  { no }; max(criterion) =  0.976 , max(test statistic) =  2.254 
       16)*  weights =  101 , prediction =  0.12 
     15) horTh  ==  { yes }
       17) menostat  ==  { Post }; max(criterion) =  0.964 , max(test statistic) =  2.101 
         18)*  weights =  45 , prediction =  0 
       17) menostat  ==  { Pre }
         19)*  weights =  20 , prediction =  -0.355 
> plot(tr)
> 
> data(mammoexp)
> attr(mammoexp$ME, "scores") <- 1:3   
> attr(mammoexp$SYMPT, "scores") <- 1:4
> attr(mammoexp$DECT, "scores") <- 1:3 
> names(mammoexp)[names(mammoexp) == "SYMPT"] <- "symptoms"
> names(mammoexp)[names(mammoexp) == "PB"] <- "benefit"
> 
> names(mammoexp)
[1] "ME"       "symptoms" "benefit"  "HIST"     "BSE"      "DECT"    
> tr <- ctree(ME ~ ., data = mammoexp, teststattype = "quadform")
Warning message:
no admissible split found 
> tr
 1) symptoms  ==  { Strongly Agree, Agree }; max(criterion) =  1 , max(test statistic) =  34.44 
   2)*  weights =  113 , prediction =  0.841 0.053 0.106 
 1) symptoms  ==  { Disagree, Strongly Disagree }
   3) benefit  <=  8; max(criterion) =  0.988 , max(test statistic) =  9.17 
     4)*  weights =  208 , prediction =  0.399 0.38 0.221 
   3) benefit  >  8
     5)*  weights =  91 , prediction =  0.615 0.209 0.176 
> plot(tr)
> 
> 
